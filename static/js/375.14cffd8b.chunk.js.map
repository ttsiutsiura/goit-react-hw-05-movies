{"version":3,"file":"static/js/375.14cffd8b.chunk.js","mappings":"2PAGaA,EAAkBC,EAAAA,EAAAA,IAAH,kHAOfC,EAAcD,EAAAA,EAAAA,IAAH,gEAKXE,GAAWF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,4F,kBCgDrB,MAtDA,WAAyB,IAAD,IACtB,GAAwCI,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,IAAU,MAAtBD,QAEFE,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAQzC,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBP,GAASQ,MAAK,SAAAC,GAC9BV,EAAgBU,EACjB,GACF,GAAE,CAACT,KAGF,iCACE,SAACL,EAAD,CAAUe,GAAIR,EAAd,sBACA,UAACV,EAAD,YACE,SAACE,EAAD,CACEiB,IAAI,GACJC,IAAG,yCAAoCd,EAAae,gBAEtD,4BACE,wBACGf,EAAagB,MAAb,UACMhB,EAAagB,MADnB,YAC4BhB,EAAaiB,aAAaC,MAAM,EAAG,IAC5D,WAEN,4BACiCC,IAA9BnB,EAAaoB,cAAb,sBACgBpB,EAAaoB,aAAaC,QAAQ,GADlD,UAGH,sCACA,uBAAIrB,EAAasB,YACjB,oCACA,4BAC2BH,IAAxBnB,EAAauB,QACZvB,EAAauB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAK1D,8CACA,2BACE,SAAC,IAAD,WACE,SAAC,IAAD,CAAWf,GAAI,UAAf,wBAEF,SAAC,IAAD,WACE,SAAC,IAAD,CAAWA,GAAI,UAAf,2BAGJ,SAAC,KAAD,MAGL,C,+GC1DYgB,GAAYjC,EAAAA,EAAAA,GAAOkC,EAAAA,GAAPlC,CAAH,8KAcTmC,EAAmBnC,EAAAA,EAAAA,GAAH,wC,+LCf7BoC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,2CAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,+BAAkCC,IADpD,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAAiC4B,GAAjC,uFACkBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,YAA0BL,IAD5C,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,uFACkBR,EAAAA,EAAAA,IAAA,8BAAiCQ,EAAjC,YAA0CP,IAD5D,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCH,GAAjC,uFACkBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,oBAAkCL,IADpD,cACCE,EADD,yBAEEA,EAASC,KAAKM,MAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCL,GAAjC,uFACkBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,oBAAkCL,IADpD,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kE","sources":["components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","components/TrandingToday/TrandingToday.styled.js","service/moviesAPI.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MainInfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  border-bottom: 1px solid black;\n`;\n\nexport const MoviePoster = styled.img`\n  margin: 12px;\n  border-radius: 4px;\n`;\n\nexport const BackLink = styled(Link)`\n  color: orangered;\n  text-decoration: none;\n  font-weight: 500;\n`;\n","import { useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetails } from 'service/moviesAPI';\nimport { MainInfoWrapper } from './MovieDetails.styled';\nimport { MoviePoster } from './MovieDetails.styled';\nimport { BackLink } from './MovieDetails.styled';\nimport { TrandingListItem } from 'components/TrandingToday/TrandingToday.styled';\nimport { MovieLink } from 'components/TrandingToday/TrandingToday.styled';\n\nfunction MovieDetails() {\n  const [movieDetails, setMovieDetails] = useState({});\n  const { movieId } = useParams(null);\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    fetchMovieDetails(movieId).then(details => {\n      setMovieDetails(details);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      <BackLink to={backLink}>Go back</BackLink>\n      <MainInfoWrapper>\n        <MoviePoster\n          alt=\"\"\n          src={`https://image.tmdb.org/t/p/w300${movieDetails.poster_path}`}\n        ></MoviePoster>\n        <div>\n          <h1>\n            {movieDetails.title\n              ? `${movieDetails.title} ${movieDetails.release_date.slice(0, 4)}`\n              : 'Title'}\n          </h1>\n          <p>\n            {movieDetails.vote_average !== undefined &&\n              `User Score: ${movieDetails.vote_average.toFixed(1)}/10`}\n          </p>\n          <h2>Overview</h2>\n          <p>{movieDetails.overview}</p>\n          <h2>Genres</h2>\n          <p>\n            {movieDetails.genres !== undefined &&\n              movieDetails.genres.map(genre => genre.name).join(', ')}\n          </p>\n        </div>\n      </MainInfoWrapper>\n\n      <h3>Additional info:</h3>\n      <ul>\n        <TrandingListItem>\n          <MovieLink to={'credits'}>Credits</MovieLink>\n        </TrandingListItem>\n        <TrandingListItem>\n          <MovieLink to={'reviews'}>Reviews</MovieLink>\n        </TrandingListItem>\n      </ul>\n      <Outlet />\n    </>\n  );\n}\n\nexport default MovieDetails;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieLink = styled(NavLink)`\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n\n  :hover {\n    color: orangered;\n  }\n\n  &.active {\n    color: orangered;\n  }\n`;\n\nexport const TrandingListItem = styled.li`\n  padding: 4px;\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst key = 'api_key=74b70279ba32fa3bffd48db3ec6e3fd8';\n\nexport async function fetchTrending() {\n  const response = await axios.get(`/trending/movie/week?${key}`);\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id) {\n  const response = await axios.get(`/movie/${id}?${key}`);\n  return response.data;\n}\n\nexport async function fetchMoviesByQuery(query) {\n  const response = await axios.get(`/search/movie?query=${query}&${key}`);\n  return response.data.results;\n}\n\nexport async function fetchMovieCredits(id) {\n  const response = await axios.get(`/movie/${id}/credits?${key}`);\n  return response.data.cast;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios.get(`/movie/${id}/reviews?${key}`);\n  return response.data.results;\n}\n"],"names":["MainInfoWrapper","styled","MoviePoster","BackLink","Link","useState","movieDetails","setMovieDetails","movieId","useParams","backLink","useLocation","state","from","useEffect","fetchMovieDetails","then","details","to","alt","src","poster_path","title","release_date","slice","undefined","vote_average","toFixed","overview","genres","map","genre","name","join","MovieLink","NavLink","TrandingListItem","axios","key","fetchTrending","response","data","results","id","fetchMoviesByQuery","query","fetchMovieCredits","cast","fetchMovieReviews"],"sourceRoot":""}